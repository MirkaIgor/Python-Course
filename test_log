============================= test session starts =============================
platform win32 -- Python 3.10.2, pytest-7.0.1, pluggy-1.0.0 -- D:\VSCode FIles\VirtualEnvironments\qamodule\Scripts\python.exe
cachedir: .pytest_cache
rootdir: D:\VSCode FIles\QAModule\GitRepo
collecting ... collected 31 items

test_calculator.py::test_int_sum[5-2-7] PASSED                           [  3%]
test_calculator.py::test_int_sum[124-56-180] PASSED                      [  6%]
test_calculator.py::test_int_sum[-44-32--12] PASSED                      [  9%]
test_calculator.py::test_float_sum[4.2-3.8-8.0] PASSED                   [ 12%]
test_calculator.py::test_float_sum[-14.6--2.6--17.2] PASSED              [ 16%]
test_calculator.py::test_int_sub[5-2-3] PASSED                           [ 19%]
test_calculator.py::test_int_sub[124-56-68] PASSED                       [ 22%]
test_calculator.py::test_int_sub[-44-32--76] PASSED                      [ 25%]
test_calculator.py::test_float_sub[4.2-3.8-0.4] PASSED                   [ 29%]
test_calculator.py::test_float_sub[-14.6--2.6--12] PASSED                [ 32%]
test_calculator.py::test_int_mult[5-2-10] PASSED                         [ 35%]
test_calculator.py::test_int_mult[124-56-6944] PASSED                    [ 38%]
test_calculator.py::test_int_mult[-44-32--1408] PASSED                   [ 41%]
test_calculator.py::test_float_mult[4.2-3.8-15.96] FAILED                [ 45%]
test_calculator.py::test_float_mult[-14.6--2.6-37.96] FAILED             [ 48%]
test_calculator.py::test_int_div[5-2-2.5] FAILED                         [ 51%]
test_calculator.py::test_int_div[168-56-3] PASSED                        [ 54%]
test_calculator.py::test_float_div[5-2-2.5] PASSED                       [ 58%]
test_calculator.py::test_float_div[7.68-2.4-3.2] PASSED                  [ 61%]
test_calculator.py::test_pow[5-2-25] PASSED                              [ 64%]
test_calculator.py::test_pow[16-0.5-4] FAILED                            [ 67%]
test_calculator.py::test_pow[4.2-2-17.64] PASSED                         [ 70%]
test_calculator.py::test_sqrt[4-2] PASSED                                [ 74%]
test_calculator.py::test_sqrt[144-12] PASSED                             [ 77%]
test_calculator.py::test_sqrt[6.25-2.5] PASSED                           [ 80%]
test_calculator.py::test_ctg[0.7853981633974483-1] FAILED                [ 83%]
test_calculator.py::test_ctg[1.5707963267948966-0] FAILED                [ 87%]
test_calculator.py::test_cos[0-1] FAILED                                 [ 90%]
test_calculator.py::test_cos[3.141592653589793--1] FAILED                [ 93%]
test_calculator.py::test_sin[3.141592653589793-0] PASSED                 [ 96%]
test_calculator.py::test_sin[0-0] PASSED                                 [100%]

================================== FAILURES ===================================
_______________________ test_float_mult[4.2-3.8-15.96] ________________________

a = 4.2, b = 3.8, expected_value = 15.96

    @pytest.mark.parametrize("a, b, expected_value",[(4.2,3.8,15.96),
                                                    (-14.6,-2.6,37.96)])
    def test_float_mult(a,b,expected_value):
>       assert c.float_mult(a,b)==expected_value
E       assert 15 == 15.96
E         +15
E         -15.96

test_calculator.py:39: AssertionError
______________________ test_float_mult[-14.6--2.6-37.96] ______________________

a = -14.6, b = -2.6, expected_value = 37.96

    @pytest.mark.parametrize("a, b, expected_value",[(4.2,3.8,15.96),
                                                    (-14.6,-2.6,37.96)])
    def test_float_mult(a,b,expected_value):
>       assert c.float_mult(a,b)==expected_value
E       assert 37 == 37.96
E         +37
E         -37.96

test_calculator.py:39: AssertionError
____________________________ test_int_div[5-2-2.5] ____________________________

a = 5, b = 2, expected_value = 2.5

    @pytest.mark.parametrize("a, b, expected_value",[(5,2,2.5),
                                                    (168,56,3)])
    def test_int_div(a,b,expected_value):
>       assert c.int_div(a,b)==int(expected_value)
E       assert 2.5 == 2
E         +2.5
E         -2

test_calculator.py:44: AssertionError
_____________________________ test_pow[16-0.5-4] ______________________________

a = 16, b = 0.5, expected_value = 4

    @pytest.mark.parametrize("a, b, expected_value",[(5,2,25),
                                                    (16,0.5,4),
                                                    (4.2,2,17.64)])
    def test_pow(a,b,expected_value):
>       assert c.pow(a,b)==expected_value
E       assert 1.0 == 4
E         +1.0
E         -4

test_calculator.py:56: AssertionError
_______________________ test_ctg[0.7853981633974483-1] ________________________

a = 0.7853981633974483, expected_value = 1

    @pytest.mark.parametrize("a, expected_value",[(PI/4,1),
                                                (PI/2,0)])
    def test_ctg(a,expected_value):
>       assert round(c.ctg(a),8)==expected_value
E       assert 0.6557942 == 1
E         +0.6557942
E         -1

test_calculator.py:67: AssertionError
_______________________ test_ctg[1.5707963267948966-0] ________________________

a = 1.5707963267948966, expected_value = 0

    @pytest.mark.parametrize("a, expected_value",[(PI/4,1),
                                                (PI/2,0)])
    def test_ctg(a,expected_value):
>       assert round(c.ctg(a),8)==expected_value
E       assert 0.91715234 == 0
E         +0.91715234
E         -0

test_calculator.py:67: AssertionError
________________________________ test_cos[0-1] ________________________________

a = 0, expected_value = 1

    @pytest.mark.parametrize("a, expected_value",[(0,1),
                                                (PI,-1)])
    def test_cos(a,expected_value):
>       assert round(c.cos(a),8)==expected_value
E       assert 0.0 == 1
E         +0.0
E         -1

test_calculator.py:72: AssertionError
_______________________ test_cos[3.141592653589793--1] ________________________

a = 3.141592653589793, expected_value = -1

    @pytest.mark.parametrize("a, expected_value",[(0,1),
                                                (PI,-1)])
    def test_cos(a,expected_value):
>       assert round(c.cos(a),8)==expected_value
E       assert 0.0 == -1
E         +0.0
E         --1

test_calculator.py:72: AssertionError
=========================== short test summary info ===========================
FAILED test_calculator.py::test_float_mult[4.2-3.8-15.96] - assert 15 == 15.96
FAILED test_calculator.py::test_float_mult[-14.6--2.6-37.96] - assert 37 == 3...
FAILED test_calculator.py::test_int_div[5-2-2.5] - assert 2.5 == 2
FAILED test_calculator.py::test_pow[16-0.5-4] - assert 1.0 == 4
FAILED test_calculator.py::test_ctg[0.7853981633974483-1] - assert 0.6557942 ...
FAILED test_calculator.py::test_ctg[1.5707963267948966-0] - assert 0.91715234...
FAILED test_calculator.py::test_cos[0-1] - assert 0.0 == 1
FAILED test_calculator.py::test_cos[3.141592653589793--1] - assert 0.0 == -1
======================== 8 failed, 23 passed in 0.12s =========================
